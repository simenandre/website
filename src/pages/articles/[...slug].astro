---
import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import { Image } from 'astro:assets';

export const getStaticPaths = (async () => {
  const articles = await getCollection('article', ({ data }) => {
    return import.meta.env.PROD ? !data.draft : true;
  });

  return articles.map(article => ({
    params: { slug: article.slug },
    props: { article },
  }));
}) satisfies GetStaticPaths;

const { article } = Astro.props;

const {
  title,
  description,
  date,
  author,
  image,
  tags,
  language,
  alternateUrls,
  syndications,
} = article.data;
const { Content } = await article.render();
type Language = typeof language;

function formatDate(date: Date | string) {
  return new Date(date).toLocaleDateString(language, {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

// Format date according to the article's language
const formattedDate = formatDate(date);
let canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Prepare JSON-LD structured data
const articleSchema: any = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: title,
  description: description,
  author: {
    '@type': 'Person',
    name: author,
  },
  datePublished: date,
  // "image": image ? new URL(image, Astro.site).toString() : undefined,
  keywords: tags?.join(', '),
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': canonicalURL.toString(),
  },
  inLanguage: language,
};

if (syndications) {
  articleSchema.isPartOf = syndications.map(url => ({
    '@type': 'CreativeWork',
    '@id': url,
  }));

  canonicalURL = new URL(syndications[0].url);
}

type UIStrings = Record<
  Language,
  {
    skipLink: string;
    by: string;
    category: string;
    articleMetadata: string;
    articleTags: string;
  }
>;

const uiStrings = {
  en: {
    skipLink: 'Skip to main content',
    by: 'By',
    at: 'at',
    category: 'Category',
    articleMetadata: 'Article metadata',
    articleTags: 'Article tags',
    syndications: 'This article is also published on: ',
  },
  'nb-NO': {
    skipLink: 'Hopp til hovedinnhold',
    by: 'Av',
    at: '@',
    category: 'Kategori',
    articleMetadata: 'Artikkelmetadata',
    articleTags: 'Artikkelmerker',
    syndications: 'Denne artikkelen er også publisert på: ',
  },
} satisfies Record<string, UIStrings>;
const ui = uiStrings[language] ?? uiStrings.en;
---

<!doctype html>
<html
  lang={language}
  dir={language.startsWith('ar') || language.startsWith('he') ? 'rtl' : 'ltr'}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>{title} | Your Site Name</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <link rel="alternate" hreflang={language} href={canonicalURL} />
    {
      alternateUrls &&
        Object.entries(alternateUrls).map(([lang, url]) => (
          <link
            rel="alternate"
            hreflang={lang}
            href={new URL(url, Astro.site)}
          />
        ))
    }
    <link rel="alternate" hreflang="x-default" href={canonicalURL} />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <meta name="theme-color" content="#ffffff" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="article" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:locale" content={language} />
    {image && <meta property="og:image" content={new URL(image, Astro.site)} />}
    {
      alternateUrls &&
        Object.keys(alternateUrls).map(lang => (
          <meta property="og:locale:alternate" content={lang} />
        ))
    }

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    {
      image && (
        <meta name="twitter:image" content={new URL(image, Astro.site)} />
      )
    }

    <!-- Article metadata -->
    {tags && <meta name="keywords" content={tags.join(', ')} />}
    <meta name="author" content={author} />

    <!-- JSON-LD structured data -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify(articleSchema)}
    />

    <!-- Preload critical assets -->
    {image && <link rel="preload" as="image" href={image} />}
  </head>
  <body>
    <a href="#main-content" class="skip-link">{ui.skipLink}</a>

    <main id="main-content" tabindex="-1">
      <article itemscope itemtype="https://schema.org/Article">
        <meta itemprop="inLanguage" content={language} />

        {
          image && (
            <div class="cover-container">
              <div
                class="cover-image"
                role="img"
                aria-label={`Cover image for ${title}`}
              >
                <Image src={image} alt={title} />
              </div>
            </div>
          )
        }

        <div class="content">
          <header class="article-header">
            <div class="metadata" aria-label={ui.articleMetadata}>
              <!-- {category && ( -->
              <!--   <span class="category" itemprop="articleSection"> -->
              <!--     {category} -->
              <!--   </span> -->
              <!-- )} -->
              <time datetime={date.toISOString()} itemprop="datePublished">
                {formattedDate}
              </time>
            </div>

            <h1 itemprop="headline">{title}</h1>

            <div class="author" itemprop="author">
              {ui.by}&nbsp;{author}
            </div>

            {
              tags && (
                <div class="tags" aria-label={ui.articleTags}>
                  {tags.map(tag => (
                    <span class="tag" itemprop="keywords">
                      {tag}
                    </span>
                  ))}
                </div>
              )
            }
          </header>

          <div class="article-content" itemprop="articleBody">
            <Content />
          </div>
        </div>
      </article>
      {
        syndications && (
          <footer>
            <p>{ui.syndications}</p>
            <ul>
              {syndications.map(s => (
                <li>
                  <a href={s.url}>
                    {s.publication} ({formatDate(s.publishedAt)})
                  </a>
                </li>
              ))}
            </ul>
          </footer>
        )
      }
    </main>

    <style>
      :root {
        /* Colors */
        --color-background: #ffffff;
        --color-surface: #ffffff;
        --color-text: #1a1a1a;
        --color-text-muted: #666666;
        --color-accent: #4a4a4a;
        --color-border: #e5e5e5;
        --color-tag-bg: #f5f5f5;
        --color-category: #1a1a1a;

        /* Typography */
        --font-sans: ui-sans-serif, system-ui, -apple-system,
          BlinkMacSystemFont, 'Segoe UI', sans-serif;
        --font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times,
          serif;
        --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
          monospace;

        /* Spacing */
        --space-xs: clamp(0.75rem, 2vw, 1rem);
        --space-s: clamp(1rem, 3vw, 1.5rem);
        --space-m: clamp(1.5rem, 5vw, 2.5rem);
        --space-l: clamp(2.5rem, 7vw, 4rem);
        --space-xl: clamp(4rem, 10vw, 6rem);

        /* Sizes */
        --content-width: 44rem;
        --content-width-wide: 75rem;
      }

      /* Skip link */
      .skip-link {
        background-color: var(--color-text);
        border-radius: 0 0 0.5rem 0.5rem;
        color: var(--color-background);
        font-family: var(--font-sans);
        font-size: 0.875rem;
        font-weight: 500;
        left: var(--space-s);
        padding: 0.75rem var(--space-s);
        position: absolute;
        text-decoration: none;
        transform: translateY(-100%);
        transition: transform 0.2s;
        z-index: 100;
      }

      .skip-link:focus {
        transform: translateY(0);
        outline: 2px solid var(--color-accent);
        outline-offset: 4px;
      }

      /* Base styles */
      body {
        background-color: var(--color-background);
        color: var(--color-text);
        font-family: var(--font-sans);
        line-height: 1.75;
        margin: 0;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
      }

      main {
        margin-inline: auto;
        max-width: 100%;
      }

      /* Cover image */
      .cover-container {
        background-color: var(--color-background);
        margin-inline: auto;
        max-width: var(--content-width-wide);
        padding: var(--space-m);
      }

      .cover-image {
        aspect-ratio: 21/9;
        border-radius: 0.75rem;
        overflow: hidden;
        position: relative;
      }

      .cover-image img {
        height: 100%;
        object-fit: cover;
        width: 100%;
      }

      /* Content */
      .content {
        margin-inline: auto;
        max-width: var(--content-width);
        padding: var(--space-m);
      }

      /* Header */
      .article-header {
        margin-block-end: var(--space-xl);
        text-align: center;
      }

      .metadata {
        color: var(--color-text-muted);
        display: flex;
        font-size: 0.9rem;
        gap: var(--space-xs);
        justify-content: center;
        letter-spacing: 0.5px;
        margin-block-end: var(--space-m);
        text-transform: uppercase;
      }

      .category {
        color: var(--color-category);
        font-weight: 500;
      }

      h1 {
        font-family: var(--font-serif);
        font-size: clamp(2rem, 5vw, 3.5rem);
        font-weight: 800;
        letter-spacing: -0.02em;
        line-height: 1.2;
        margin-block: 0 var(--space-s);
      }

      .author {
        color: var(--color-text-muted);
        font-size: 1.1rem;
        margin-block-end: var(--space-m);
      }

      /* Tags */
      .tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        justify-content: center;
      }

      .tag {
        background-color: var(--color-tag-bg);
        border-radius: 2rem;
        color: var(--color-text-muted);
        font-size: 0.875rem;
        padding: 0.25rem 0.875rem;
      }

      /* Article content styles */
      .article-content {
        font-family: var(--font-serif);
        font-size: 1.325rem;
        margin-inline: auto;
      }

      .article-content :global(h2) {
        font-family: var(--font-sans);
        font-size: 1.75rem;
        font-weight: 700;
        letter-spacing: -0.01em;
        line-height: 1.3;
        margin-block: var(--space-l) var(--space-s);
      }

      .article-content :global(h3) {
        font-family: var(--font-sans);
        font-size: 1.4rem;
        font-weight: 600;
        letter-spacing: -0.01em;
        line-height: 1.3;
        margin-block: var(--space-m) var(--space-xs);
      }

      .article-content :global(p) {
        margin-block: var(--space-m);
      }

      .article-content :global(a) {
        color: inherit;
        text-decoration-color: var(--color-accent);
        text-decoration-thickness: 1px;
        text-underline-offset: 0.2em;
      }

      .article-content :global(a:hover) {
        text-decoration-thickness: 2px;
      }

      .article-content :global(img) {
        border-radius: 0.75rem;
        margin-block: var(--space-l);
        max-width: 100%;
        height: auto;
      }

      .article-content :global(pre) {
        background-color: var(--color-tag-bg);
        border-radius: 0.75rem;
        font-family: var(--font-mono);
        margin-block: var(--space-m);
        overflow-x: auto;
        padding: var(--space-s);
      }

      .article-content :global(code) {
        background-color: var(--color-tag-bg);
        border-radius: 0.25rem;
        font-family: var(--font-mono);
        font-size: 0.875em;
        padding: 0.2em 0.4em;
      }

      .article-content :global(pre code) {
        background-color: transparent;
        padding: 0;
      }

      .article-content :global(blockquote) {
        border-inline-start: 2px solid var(--color-accent);
        font-style: italic;
        margin-inline: 0;
        padding: var(--space-xs) 0 var(--space-xs) var(--space-m);
      }

      .article-content :global(ul),
      .article-content :global(ol) {
        margin-block: var(--space-m);
        padding-inline-start: var(--space-m);
      }

      .article-content :global(li + li) {
        margin-block-start: 0.75em;
      }

      /* Dark mode */
      @media (prefers-color-scheme: dark) {
        :root {
          --color-background: #1a1a1a;
          --color-surface: #1a1a1a;
          --color-text: #f0f0f0;
          --color-text-muted: #a0a0a0;
          --color-accent: #c0c0c0;
          --color-border: #333333;
          --color-tag-bg: #2a2a2a;
          --color-category: #f0f0f0;
        }
      }

      /* Reduced motion */
      @media (prefers-reduced-motion: reduce) {
        * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
          scroll-behavior: auto !important;
        }
      }

      footer {
        margin-block: var(--space-xl);
        text-align: center;
      }

      footer ul {
        list-style: none;
        margin: 0;
        padding: 0;
      }

      footer li a {
        color: var(--color-accent);
        text-decoration: none;
      }
    </style>
  </body>
</html>
